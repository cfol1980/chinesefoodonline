// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Get current user's /users/{uid} doc (may be null if not created yet).
    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      return isSignedIn() && userDoc().data.roles.admin == true;
    }
    function ownsSupporter(supporterId) {
      return isSignedIn() &&
             supporterId in userDoc().data.ownedSupporterIds;
    }

    // -------- SUPPORTERS --------
    match /supporters/{supporterId} {
      // Public can read supporter profile & public menu
      allow read: if true;

      // Admin or owner can modify supporter doc
      allow create, update, delete: if isAdmin() || ownsSupporter(supporterId);

      // All subcollections: categories, items, orders (if needed later), etc.
      match /{subcollection}/{docId} {
        allow read: if true;
        allow write: if isAdmin() || ownsSupporter(supporterId);
      }
    }

    // -------- USERS --------
    match /users/{uid} {
      // Each user manages their own doc. Admin can read all.
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == uid);
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow update, delete: if isSignedIn() && request.auth.uid == uid;
    }

    // (Optional) global indexes like /orders can be admin-only later
    match /orders/{orderId} {
      allow read, write: if isAdmin();
    }
  }
}
